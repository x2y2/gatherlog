// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gather.proto

package gather

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RequestLog struct {
	FileName             string   `protobuf:"bytes,1,opt,name=FileName,proto3" json:"FileName,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestLog) Reset()         { *m = RequestLog{} }
func (m *RequestLog) String() string { return proto.CompactTextString(m) }
func (*RequestLog) ProtoMessage()    {}
func (*RequestLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ee5809ab7d1883a, []int{0}
}

func (m *RequestLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestLog.Unmarshal(m, b)
}
func (m *RequestLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestLog.Marshal(b, m, deterministic)
}
func (m *RequestLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLog.Merge(m, src)
}
func (m *RequestLog) XXX_Size() int {
	return xxx_messageInfo_RequestLog.Size(m)
}
func (m *RequestLog) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLog.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLog proto.InternalMessageInfo

func (m *RequestLog) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *RequestLog) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ResponseLog struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseLog) Reset()         { *m = ResponseLog{} }
func (m *ResponseLog) String() string { return proto.CompactTextString(m) }
func (*ResponseLog) ProtoMessage()    {}
func (*ResponseLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ee5809ab7d1883a, []int{1}
}

func (m *ResponseLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseLog.Unmarshal(m, b)
}
func (m *ResponseLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseLog.Marshal(b, m, deterministic)
}
func (m *ResponseLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseLog.Merge(m, src)
}
func (m *ResponseLog) XXX_Size() int {
	return xxx_messageInfo_ResponseLog.Size(m)
}
func (m *ResponseLog) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseLog.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseLog proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RequestLog)(nil), "gather.RequestLog")
	proto.RegisterType((*ResponseLog)(nil), "gather.ResponseLog")
}

func init() { proto.RegisterFile("gather.proto", fileDescriptor_3ee5809ab7d1883a) }

var fileDescriptor_3ee5809ab7d1883a = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x4f, 0x2c, 0xc9,
	0x48, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x9c, 0xb8, 0xb8,
	0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x7c, 0xf2, 0xd3, 0x85, 0xa4, 0xb8, 0x38, 0xdc, 0x32,
	0x73, 0x52, 0xfd, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xe0, 0x7c, 0x21,
	0x09, 0x2e, 0x76, 0xe7, 0xfc, 0xbc, 0x92, 0xd4, 0xbc, 0x12, 0x09, 0x26, 0xb0, 0x14, 0x8c, 0xab,
	0xc4, 0xcb, 0xc5, 0x1d, 0x94, 0x5a, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0xea, 0x93, 0x9f, 0x6e, 0x64,
	0xcb, 0xc5, 0xe9, 0x0e, 0x36, 0x1c, 0x64, 0xa2, 0x01, 0x17, 0xb3, 0x7b, 0x6a, 0x89, 0x90, 0x90,
	0x1e, 0xd4, 0x76, 0x84, 0x65, 0x52, 0xc2, 0x08, 0x31, 0xb8, 0x66, 0x25, 0x86, 0x24, 0x36, 0xb0,
	0x03, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x74, 0xec, 0xcc, 0xb0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GatherLogClient is the client API for GatherLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatherLogClient interface {
	Get(ctx context.Context, in *RequestLog, opts ...grpc.CallOption) (*ResponseLog, error)
}

type gatherLogClient struct {
	cc *grpc.ClientConn
}

func NewGatherLogClient(cc *grpc.ClientConn) GatherLogClient {
	return &gatherLogClient{cc}
}

func (c *gatherLogClient) Get(ctx context.Context, in *RequestLog, opts ...grpc.CallOption) (*ResponseLog, error) {
	out := new(ResponseLog)
	err := c.cc.Invoke(ctx, "/gather.GatherLog/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatherLogServer is the server API for GatherLog service.
type GatherLogServer interface {
	Get(context.Context, *RequestLog) (*ResponseLog, error)
}

func RegisterGatherLogServer(s *grpc.Server, srv GatherLogServer) {
	s.RegisterService(&_GatherLog_serviceDesc, srv)
}

func _GatherLog_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatherLogServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gather.GatherLog/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatherLogServer).Get(ctx, req.(*RequestLog))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatherLog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gather.GatherLog",
	HandlerType: (*GatherLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GatherLog_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gather.proto",
}
